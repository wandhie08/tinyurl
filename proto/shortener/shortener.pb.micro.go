// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/shortener.proto

package shortener

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for URLShortener service

func NewURLShortenerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for URLShortener service

type URLShortenerService interface {
	Create(ctx context.Context, in *URLRequest, opts ...client.CallOption) (*URLResponse, error)
}

type uRLShortenerService struct {
	c    client.Client
	name string
}

func NewURLShortenerService(name string, c client.Client) URLShortenerService {
	return &uRLShortenerService{
		c:    c,
		name: name,
	}
}

func (c *uRLShortenerService) Create(ctx context.Context, in *URLRequest, opts ...client.CallOption) (*URLResponse, error) {
	req := c.c.NewRequest(c.name, "URLShortener.Create", in)
	out := new(URLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for URLShortener service

type URLShortenerHandler interface {
	Create(context.Context, *URLRequest, *URLResponse) error
}

func RegisterURLShortenerHandler(s server.Server, hdlr URLShortenerHandler, opts ...server.HandlerOption) error {
	type uRLShortener interface {
		Create(ctx context.Context, in *URLRequest, out *URLResponse) error
	}
	type URLShortener struct {
		uRLShortener
	}
	h := &uRLShortenerHandler{hdlr}
	return s.Handle(s.NewHandler(&URLShortener{h}, opts...))
}

type uRLShortenerHandler struct {
	URLShortenerHandler
}

func (h *uRLShortenerHandler) Create(ctx context.Context, in *URLRequest, out *URLResponse) error {
	return h.URLShortenerHandler.Create(ctx, in, out)
}
